const LichHen = require("../models/lichHenModel");

const LichHenController = {
  // üîπ L·∫•y danh s√°ch t·∫•t c·∫£ l·ªãch h·∫πn
  getAllLichHen: async (req, res) => {
    try {
      const data = await LichHen.getAlls();
      res.status(200).json(data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ L·∫•y chi ti·∫øt l·ªãch h·∫πn theo ID
  getLichHenById: async (req, res) => {
    try {
      const { id } = req.params;
      const lichHen = await LichHen.getById(id);

      if (!lichHen) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn" });
      }

      res.status(200).json(lichHen);
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ L·∫•y l·ªãch h·∫πn theo b√°c sƒ©
  getLichHenByBacSiId: async (req, res) => {
    try {
      const { id } = req.params;
      const lichHen = await LichHen.getByBacSiId(id);

      if (!lichHen) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn" });
      }

      res.status(200).json(lichHen);
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ L·∫•y l·ªãch h·∫πn theo kh√°ch h√†ng
  getLichHenByKhachHangId: async (req, res) => {
    try {
      const { id } = req.params;
      const lichHen = await LichHen.getByKhachHangId(id);

      if (!lichHen) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn" });
      }

      res.status(200).json(lichHen);
    } catch (error) {
      console.error("L·ªói khi l·∫•y l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ T·∫°o m·ªõi l·ªãch h·∫πn
  createLichHen: async (req, res) => {
    try {
      console.log("üì• Body nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", req.body);
      const { GhiChu, NgayHen, TinhTrang, MaKhachHang, MaBacSi } = req.body;

      if (!NgayHen || !TinhTrang || !MaKhachHang || !MaBacSi) {
        return res.status(400).json({
          message: "C√°c tr∆∞·ªùng NgayHen, TinhTrang, MaKhachHang, MaBacSi l√† b·∫Øt bu·ªôc!",
        });
      }

      const ngayHenDate = new Date(NgayHen);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (ngayHenDate < today) {
        return res.status(400).json({ message: "Ng√†y h·∫πn kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n ng√†y hi·ªán t·∫°i!" });
      }

      if (![0, 1, 2, 3].includes(Number(TinhTrang))) {
        return res.status(400).json({ message: "T√¨nh tr·∫°ng kh√¥ng h·ª£p l·ªá!" });
      }

      const formattedDate = ngayHenDate.toISOString().split("T")[0];
      const count = await LichHen.countByBacSiAndDate(MaBacSi, formattedDate);

      if (count >= 6) {
        const formatted = `${String(ngayHenDate.getDate()).padStart(2, "0")}/${String(
          ngayHenDate.getMonth() + 1
        ).padStart(2, "0")}/${ngayHenDate.getFullYear()}`;
        return res.status(400).json({
          message: `B√°c sƒ© n√†y ƒë√£ ƒë·ªß l·ªãch h·∫πn trong ng√†y ${formatted}, kh√¥ng th·ªÉ ƒë·∫∑t th√™m!`,
        });
      }

      const existed = await LichHen.countByKhachHangAndDate(MaKhachHang, formattedDate);

      if (existed) {
        const formatted = `${String(ngayHenDate.getDate()).padStart(2, "0")}/${String(
          ngayHenDate.getMonth() + 1
        ).padStart(2, "0")}/${ngayHenDate.getFullYear()}`;
        return res.status(400).json({
          message: `B·∫°n ƒë√£ c√≥ l·ªãch h·∫πn trong ng√†y ${formatted}, kh√¥ng th·ªÉ ƒë·∫∑t th√™m!`,
        });
      }
      console.log("üì• existed:", existed);

      // ‚úÖ T·∫°o l·ªãch h·∫πn m·ªõi
      const result = await LichHen.create({
        GhiChu,
        NgayHen,
        TinhTrang,
        MaKhachHang,
        MaBacSi,
      });

      return res.status(201).json({
        message: "Th√™m l·ªãch h·∫πn th√†nh c√¥ng!",
        data: result,
      });
    } catch (error) {
      console.error("L·ªói khi th√™m l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ C·∫≠p nh·∫≠t l·ªãch h·∫πn
  updateLichHen: async (req, res) => {
    try {
      const { id } = req.params;
      const { GhiChu, NgayHen, TinhTrang, MaKhachHang, MaBacSi } = req.body;

      if (!NgayHen || !TinhTrang || !MaKhachHang || !MaBacSi) {
        return res.status(400).json({
          message: "C√°c tr∆∞·ªùng NgayHen, TinhTrang, MaKhachHang, MaBacSi l√† b·∫Øt bu·ªôc!",
        });
      }

      // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
      const ngayHenDate = new Date(NgayHen);
      if (Number.isNaN(ngayHenDate.getTime())) {
        return res.status(400).json({ message: "Ng√†y h·∫πn kh√¥ng h·ª£p l·ªá!" });
      }

      if (![0, 1, 2, 3].includes(Number(TinhTrang))) {
        return res.status(400).json({ message: "T√¨nh tr·∫°ng kh√¥ng h·ª£p l·ªá!" });
      }

      const result = await LichHen.update(id, {
        GhiChu,
        NgayHen,
        TinhTrang,
        MaKhachHang,
        MaBacSi,
      });

      if (result.affectedRows === 0) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ c·∫≠p nh·∫≠t!" });
      }

      return res.status(200).json({ message: "C·∫≠p nh·∫≠t l·ªãch h·∫πn th√†nh c√¥ng!" });
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },

  // üîπ X√≥a l·ªãch h·∫πn
  deleteLichHen: async (req, res) => {
    try {
      const { id } = req.params;
      const deleted = await LichHen.delete(id);

      if (!deleted) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ x√≥a!" });
      }

      return res.status(200).json({ message: "X√≥a l·ªãch h·∫πn th√†nh c√¥ng!" });
    } catch (error) {
      console.error("L·ªói khi x√≥a l·ªãch h·∫πn:", error);
      res.status(500).json({ message: "L·ªói server", error: error.message });
    }
  },
};

module.exports = LichHenController;
